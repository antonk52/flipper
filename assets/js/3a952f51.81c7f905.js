"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[428],{3905:(e,n,r)=>{r.r(n),r.d(n,{MDXContext:()=>c,MDXProvider:()=>d,mdx:()=>y,useMDXComponents:()=>s,withMDXComponents:()=>u});var t=r(67294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(){return o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var r=arguments[n];for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])}return e},o.apply(this,arguments)}function p(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?p(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=t.createContext({}),u=function(e){return function(n){var r=s(n.components);return t.createElement(e,o({},n,{components:r}))}},s=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},d=function(e){var n=s(e.components);return t.createElement(c.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(r),d=a,f=u["".concat(p,".").concat(d)]||u[d]||m[d]||o;return r?t.createElement(f,i(i({ref:n},c),{},{components:r})):t.createElement(f,i({ref:n},c))}));function y(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,p=new Array(o);p[0]=f;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,p[1]=i;for(var c=2;c<o;c++)p[c]=r[c];return t.createElement.apply(null,p)}return t.createElement.apply(null,r)}f.displayName="MDXCreateElement"},46028:(e,n,r)=>{r.r(n),r.d(n,{frontMatter:()=>i,contentTitle:()=>l,metadata:()=>c,toc:()=>u,default:()=>d});var t=r(83117),a=r(80102),o=(r(67294),r(3905)),p=["components"],i={},l=void 0,c={type:"mdx",permalink:"/flipper/docs/plugins/leak-canary/setup",source:"@site/src/embedded-pages/docs/plugins/leak-canary/setup.mdx"},u=[],s={toc:u};function d(e){var n=e.components,r=(0,a.Z)(e,p);return(0,o.mdx)("wrapper",(0,t.Z)({},s,r,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("p",null,"Ensure that you already have an explicit dependency in your application's\n",(0,o.mdx)("inlineCode",{parentName:"p"},"build.gradle")," including the plugin dependency, e.g."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-groovy"},"dependencies {\n  debugImplementation 'com.facebook.flipper:flipper-leakcanary2-plugin:0.119.0'\n  debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.6'\n}\n")),(0,o.mdx)("p",null,"Update your the ",(0,o.mdx)("inlineCode",{parentName:"p"},"onCreate")," method in you ",(0,o.mdx)("inlineCode",{parentName:"p"},"Application")," to add the LeakCanary2 plugin to Flipper and the Flipper listener to LeakCanary"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-kt"},"import com.facebook.flipper.plugins.leakcanary2.FlipperLeakListener\nimport com.facebook.flipper.plugins.leakcanary2.LeakCanary2FlipperPlugin\n\n...\n\n  override fun onCreate() {\n    super.onCreate()\n    setupFlipper()\n\n    /*\n    set the flipper listener in leak canary config\n    */\n    LeakCanary.config = LeakCanary.config.copy(\n        onHeapAnalyzedListener = FlipperLeakListener()\n    )\n\n    SoLoader.init(this, false)\n\n    if (BuildConfig.DEBUG && FlipperUtils.shouldEnableFlipper(this)) {\n      val client = AndroidFlipperClient.getInstance(this)\n      /*\n      add leak canary plugin to flipper\n      */\n      client.addPlugin(LeakCanary2FlipperPlugin())\n      client.start()\n    }\n  }\n")),(0,o.mdx)("p",null,"That's it!"))}d.isMDXComponent=!0}}]);