"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7298],{3905:(e,r,t)=>{t.r(r),t.d(r,{MDXContext:()=>a,MDXProvider:()=>d,mdx:()=>v,useMDXComponents:()=>c,withMDXComponents:()=>u});var n=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function p(){return p=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e},p.apply(this,arguments)}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},p=Object.keys(e);for(n=0;n<p.length;n++)t=p[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(n=0;n<p.length;n++)t=p[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var a=n.createContext({}),u=function(e){return function(r){var t=c(r.components);return n.createElement(e,p({},r,{components:t}))}},c=function(e){var r=n.useContext(a),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},d=function(e){var r=c(e.components);return n.createElement(a.Provider,{value:r},e.children)},m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,p=e.originalType,i=e.parentName,a=l(e,["components","mdxType","originalType","parentName"]),u=c(t),d=o,f=u["".concat(i,".").concat(d)]||u[d]||m[d]||p;return t?n.createElement(f,s(s({ref:r},a),{},{components:t})):n.createElement(f,s({ref:r},a))}));function v(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var p=t.length,i=new Array(p);i[0]=f;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var a=2;a<p;a++)i[a]=t[a];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},3428:(e,r,t)=>{t.r(r),t.d(r,{frontMatter:()=>s,contentTitle:()=>l,metadata:()=>a,toc:()=>u,default:()=>d});var n=t(83117),o=t(80102),p=(t(67294),t(3905)),i=["components"],s={id:"custom-ports",title:"Running Flipper with different ports",sidebar_label:"Using different ports"},l=void 0,a={unversionedId:"custom-ports",id:"custom-ports",isDocsHomePage:!1,title:"Running Flipper with different ports",description:"FLIPPER ports",source:"@site/../docs/custom-ports.mdx",sourceDirName:".",slug:"/custom-ports",permalink:"/flipper/docs/custom-ports",editUrl:"https://github.com/facebook/flipper/blob/main/website/../docs/custom-ports.mdx",tags:[],version:"current",frontMatter:{id:"custom-ports",title:"Running Flipper with different ports",sidebar_label:"Using different ports"},sidebar:"setup",previous:{title:"Sandbox",permalink:"/flipper/docs/setup/plugins/sandbox"},next:{title:"Stetho Guidance",permalink:"/flipper/docs/stetho"}},u=[{value:"FLIPPER ports",id:"flipper-ports",children:[],level:2},{value:"METRO SERVER PORTS",id:"metro-server-ports",children:[],level:2},{value:"ADB REVERSE PROXY PORTS",id:"adb-reverse-proxy-ports",children:[],level:2}],c={toc:u};function d(e){var r=e.components,t=(0,o.Z)(e,i);return(0,p.mdx)("wrapper",(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,p.mdx)("h2",{id:"flipper-ports"},"FLIPPER ports"),(0,p.mdx)("p",null,"By default Flipper runs its servers on ports 8088 and 8089, and the mobile SDKs look for servers on those ports."),(0,p.mdx)("p",null,"Each of these can be overridden by setting an environment variable, with the format ",(0,p.mdx)("inlineCode",{parentName:"p"},"${INSECURE_PORT},${SECURE_PORT}"),"."),(0,p.mdx)("p",null,"To run the desktop app using custom ports:"),(0,p.mdx)("pre",null,(0,p.mdx)("code",{parentName:"pre"},"env FLIPPER_PORTS=1111,2222 ./flipper\n")),(0,p.mdx)("p",null,"or with a dev build:"),(0,p.mdx)("pre",null,(0,p.mdx)("code",{parentName:"pre"},"env FLIPPER_PORTS=1111,2222 yarn start\n")),(0,p.mdx)("p",null,"To configure the Android SDK for custom ports, set the ",(0,p.mdx)("inlineCode",{parentName:"p"},"flipper.ports")," prop to your chosen ports ",(0,p.mdx)("inlineCode",{parentName:"p"},"1111,2222")," like so, and then launch the Android app:"),(0,p.mdx)("pre",null,(0,p.mdx)("code",{parentName:"pre"},"adb shell su 0 setprop flipper.ports 1111,2222\n")),(0,p.mdx)("p",null,"To configure the iOS SDK for custom ports, set the FLIPPER_PORTS environment variable in your app launch script or set it system-wide through User Defaults:"),(0,p.mdx)("pre",null,(0,p.mdx)("code",{parentName:"pre"},'xcrun simctl spawn booted defaults write "Apple Global Domain" "com.facebook.flipper.ports" -string "1111,2222"\n')),(0,p.mdx)("h2",{id:"metro-server-ports"},"METRO SERVER PORTS"),(0,p.mdx)("p",null,"You can also setup Flipper to use a different Metro Server port (default=8081) using this environement variable:"),(0,p.mdx)("pre",null,(0,p.mdx)("code",{parentName:"pre"},"METRO_SERVER_PORT=3333 ./flipper\n")),(0,p.mdx)("h2",{id:"adb-reverse-proxy-ports"},"ADB REVERSE PROXY PORTS"),(0,p.mdx)("p",null,"And setup a different ADB port used for reverse proxying when plugged through USB (default=5037) using:"),(0,p.mdx)("pre",null,(0,p.mdx)("code",{parentName:"pre"},"ANDROID_ADB_SERVER_PORT=4444 ./flipper\n")))}d.isMDXComponent=!0}}]);